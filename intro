import React, { useState, useEffect } from 'react';
import { ChevronLeft } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import confetti from 'canvas-confetti';

// Previous code remains the same until ProgressCircle component
// Here's the fixed ProgressCircle:

const ProgressCircle = ({ step }) => {
  const calculateRotation = (step) => {
    switch(step) {
      case 1: return 120;  // 0-120 degrees
      case 2: return 240;  // 0-240 degrees
      case 3: return 360;  // Full circle
      default: return 0;
    }
  };

  return (
    <div style={{
      width: '64px',
      height: '64px',
      position: 'relative'
    }}>
      {/* Base circle */}
      <div style={{
        width: '100%',
        height: '100%',
        borderRadius: '50%',
        border: '4px solid #e5e5e5',
        position: 'absolute'
      }} />
      
      {/* Progress circle */}
      <div style={{
        width: '100%',
        height: '100%',
        borderRadius: '50%',
        position: 'absolute',
        clipPath: 'circle(50%)',
        transform: 'rotate(-90deg)',
        background: `conic-gradient(
          #00C805 0deg ${calculateRotation(step)}deg,
          transparent ${calculateRotation(step)}deg 360deg
        )`
      }} />
    </div>
  );
};

// New Success Screen component
const SuccessScreen = ({ username, onContinue }) => {
  useEffect(() => {
    // Trigger confetti
    const duration = 3000;
    const animationEnd = Date.now() + duration;
    const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

    function randomInRange(min, max) {
      return Math.random() * (max - min) + min;
    }

    const interval = setInterval(() => {
      const timeLeft = animationEnd - Date.now();

      if (timeLeft <= 0) {
        return clearInterval(interval);
      }

      const particleCount = 50 * (timeLeft / duration);
      
      confetti({
        ...defaults,
        particleCount,
        origin: { x: randomInRange(0.1, 0.9), y: Math.random() - 0.2 }
      });
    }, 250);

    return () => clearInterval(interval);
  }, []);

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      style={{ 
        backgroundColor: 'white', 
        minHeight: '100vh', 
        padding: '24px',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center'
      }}
    >
      <motion.div
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ type: "spring", duration: 0.5 }}
        style={{
          width: '80px',
          height: '80px',
          borderRadius: '50%',
          backgroundColor: '#00C805',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          marginBottom: '32px'
        }}
      >
        <svg width="40" height="40" viewBox="0 0 24 24" fill="none">
          <motion.path
            initial={{ pathLength: 0 }}
            animate={{ pathLength: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            d="M20 6L9 17L4 12"
            stroke="white"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
        </svg>
      </motion.div>

      <motion.h1
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.3 }}
        style={{
          fontSize: '32px',
          fontWeight: '700',
          textAlign: 'center',
          marginBottom: '16px'
        }}
      >
        Welcome {username}!
      </motion.h1>

      <motion.p
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.4 }}
        style={{
          fontSize: '18px',
          color: '#666',
          textAlign: 'center',
          marginBottom: '48px'
        }}
      >
        Your account is ready to go
      </motion.p>

      <motion.button
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.5 }}
        onClick={onContinue}
        style={{
          backgroundColor: '#00C805',
          color: 'white',
          padding: '16px 32px',
          borderRadius: '12px',
          fontSize: '18px',
          fontWeight: '500',
          border: 'none',
          cursor: 'pointer',
          width: '100%',
          maxWidth: '300px'
        }}
      >
        Continue to Dashboard
      </motion.button>
    </motion.div>
  );
};

// In your main App component, add the success screen to the AnimatePresence:
{currentScreen === 'success' && (
  <SuccessScreen
    username={formData.username}
    onContinue={() => console.log('Navigate to dashboard')}
  />
)}

// Rest of your existing code remains the same
